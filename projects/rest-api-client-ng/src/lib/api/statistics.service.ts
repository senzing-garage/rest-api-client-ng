/**
 * Senzing POC REST API
 * This is the Senzing POC REST API.  This API is <b>NOT</b> maintained for backwards compatibility.  This API extends the [Senzing REST API](https://petstore.swagger.io/?url=https://raw.githubusercontent.com/senzing-garage/senzing-rest-api-specification/main/senzing-rest-api.yaml) which is maintained for backwards compatibility.  However, the Senzing POC API is specifically targeted at the Senzing One-Day POC application and no guarantees are made for support.  It can be used as example for creating your own extended API. <br><br> <b>SSE NOTE:</b> Some end-points described here will indicate \"(Supports SSE)\" to indicate that they support \"Server-sent Events\" via the `text/event-stream` media type.  This support is activated by adding the `Accept: text/event-stream` header to a request to override the default `application/json` media type.  Further, the end-point will behave similarly to its standard operation but will produce `progress` events at regular intervals that are equivalent to its `200` response schema. Upon success, the final event will be `completed` with the same response schema as a `200` response.  Upon failure, the final event will be `failed` with same schema as the `4xx` or `5xx` response (typically the `SzErrorResponse`) <br><br> <b>WEB SOCKETS NOTE:</b> Some end-points described here will indicate \"(Supports WebSockets)\" to indicate that they can invoked via the Web Sockets protocol. This support is activated by invoking the end-point using the `ws://` protocol in the URL.  Any request query parameters can still be sent on the URL and the request body can be sent as one or more message from the client (as documented).  The end-point response will be sent as one or more response messages as documented (sometimes describing progress as with SSE end-points).  Upon failure responses will follow the same schema as the `4xx` or `5xx` response (typically the `SzErrorResponse`)
 *
 * OpenAPI spec version: 3.5.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

 import { Inject, Injectable, Optional }                      from '@angular/core';
 import { HttpClient, HttpHeaders, HttpParams,
          HttpResponse, HttpEvent }                           from '@angular/common/http';
 import { CustomHttpUrlEncodingCodec }                        from '../encoder';
 
 import { Observable }                                        from 'rxjs';
 
 import { SzBoundType } from '../model/szBoundType';
 import { SzCrossSourceSummaryResponse } from '../model/szCrossSourceSummaryResponse';
 import { SzEntityRelationsBreakdownResponse } from '../model/szEntityRelationsBreakdownResponse';
 import { SzEntityRelationsCountResponse } from '../model/szEntityRelationsCountResponse';
 import { SzEntitySizeBreakdownResponse } from '../model/szEntitySizeBreakdownResponse';
 import { SzEntitySizeCountResponse } from '../model/szEntitySizeCountResponse';
 import { SzErrorResponse } from '../model/szErrorResponse';
 import { SzLoadedStatsResponse } from '../model/szLoadedStatsResponse';
 import { SzMatchCountsResponse } from '../model/szMatchCountsResponse';
 import { SzPagedEntitiesResponse } from '../model/szPagedEntitiesResponse';
 import { SzPagedRelationsResponse } from '../model/szPagedRelationsResponse';
 import { SzRelationCountsResponse } from '../model/szRelationCountsResponse';
 import { SzSourceLoadedStatsResponse } from '../model/szSourceLoadedStatsResponse';
 import { SzSourceSummaryResponse } from '../model/szSourceSummaryResponse';
 import { SzSummaryStatsResponse } from '../model/szSummaryStatsResponse';
 
 import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
 import { Configuration }                                     from '../configuration';
 
 
 @Injectable()
 export class StatisticsService {
 
     protected basePath = 'http://localhost:8250';
     public defaultHeaders = new HttpHeaders();
     public configuration = new Configuration();
 
     constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
         if (basePath) {
             this.basePath = basePath;
         }
         if (configuration) {
             this.configuration = configuration;
             this.basePath = basePath || configuration.basePath || this.basePath;
         }
     }
 
     /**
      * @param consumes string[] mime-types
      * @return true: consumes contains 'multipart/form-data', false: otherwise
      */
     private canConsumeForm(consumes: string[]): boolean {
         const form = 'multipart/form-data';
         for (const consume of consumes) {
             if (form === consume) {
                 return true;
             }
         }
         return false;
     }
 
 
     /**
      * Gets the entity ID&#x27;s of the entities having at least one record from the first data source and an ambiguous-match relationship to an entity having at least one record from the versus data source.
      * Gets the entity ID&#x27;s of the entities having at least one record from the first data source and an ambiguous-match relationship to an entity having at least one record from the versus data source.  If there are no such entities then this will return a 200 OK response that will have an empty array of entity ID values rather than giving a 404 Not Found response. Further, if there are no entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the entity ID array contained in the response will be empty.  However, if either data source code is not found in the configuration then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.        
      * @param dataSourceCode The data source code identifying the data source.
      * @param vsDataSourceCode The data source code identifying the data source to which the first data source is compared for the statistics.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through entity ID&#x27;s associated with a statistic.  The value is specified as bound on the entity ID values returned.  The type of bound is given by the  &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned entity ID values must satisfy the condition that they are strictly greater than the entity ID bound value. To move to the \&quot;next page\&quot; of entity ID&#x27;s specify the greatest entity ID value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;. To move to the \&quot;previous page\&quot; of entity ID&#x27;s specify the least entity ID value on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least entity ID value on the current page and specify a &#x60;boundType&#x60; of  &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getAmbiguouslyCrossMatchedEntityIds(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedEntitiesResponse>;
     public getAmbiguouslyCrossMatchedEntityIds(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedEntitiesResponse>>;
     public getAmbiguouslyCrossMatchedEntityIds(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedEntitiesResponse>>;
     public getAmbiguouslyCrossMatchedEntityIds(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getAmbiguouslyCrossMatchedEntityIds.');
         }
 
         if (vsDataSourceCode === null || vsDataSourceCode === undefined) {
             throw new Error('Required parameter vsDataSourceCode was null or undefined when calling getAmbiguouslyCrossMatchedEntityIds.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedEntitiesResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/vs/${encodeURIComponent(String(vsDataSourceCode))}/ambiguous-matches/entities`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the &#x60;SzRelation&#x60; values describing the ambiguous-match relationships between entities having at least one record from the first data source and entities having at least one record from the versus data source.
      * Gets the &#x60;SzRelation&#x60; values describing the ambiguous-match relationships between entities containing at least one record from the first data source and another entity having at least one record from the versus data source. If there are no such relationships then this will return a 200 OK response that will have an empty array of &#x60;SzRelation&#x60; values rather than giving a 404 Not Found response.  Further, if there are no relationships for entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the &#x60;SzRelation&#x60; array contained in the response will be empty.  However, if either data source code is not found in the configuration then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.        
      * @param dataSourceCode The data source code identifying the data source.
      * @param vsDataSourceCode The data source code identifying the data source to which the first data source is compared for the statistics.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through relationships associated with a statistic.  The value is specified as bound on the entity ID&#x27;s in the &#x60;SzRelation&#x60; values returned and contains two  entity ID values separated by a colon (e.g.: &#x60;1000:5500&#x60;).  The type of bound is given by the &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned &#x60;SzRelation&#x60; values must be canonically greater than the relationship described by the  entity ID values encoded in the bound.  &#x60;SzRelation&#x60; values are ordered  on the first entity ID value and then on the second related entity ID value.  To move to the \&quot;next page\&quot; of relationships specify the encoded value of the entity ID and related ID of the greatest (last) &#x60;SzRelation&#x60; on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the \&quot;previous page\&quot; of relationships specify the encoded value of the entity ID and related ID of the least (first) &#x60;SzRelation&#x60; on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the encoded value of the entity ID and related ID of the least (first) &#x60;SzRelation&#x60; on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getAmbiguouslyCrossMatchedRelations(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedRelationsResponse>;
     public getAmbiguouslyCrossMatchedRelations(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedRelationsResponse>>;
     public getAmbiguouslyCrossMatchedRelations(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedRelationsResponse>>;
     public getAmbiguouslyCrossMatchedRelations(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getAmbiguouslyCrossMatchedRelations.');
         }
 
         if (vsDataSourceCode === null || vsDataSourceCode === undefined) {
             throw new Error('Required parameter vsDataSourceCode was null or undefined when calling getAmbiguouslyCrossMatchedRelations.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedRelationsResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/vs/${encodeURIComponent(String(vsDataSourceCode))}/ambiguous-matches/relations`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the entity ID&#x27;s of the entities having ambiguous-match relationships to other entities where each entity contains a record from the respective data source.
      * Gets the entity ID&#x27;s of the entities having ambiguous-match relationships to other entities where each entity contains a record fron the respective  data source.  If there are no such entities then this will return a 200 OK response that will have an empty array of entity ID values rather than giving a 404 Not Found response.  Further, if there are no entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the entity ID array contained in the response will be empty.  However, if the data source code is not found in the configuration then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.        
      * @param dataSourceCode The data source code identifying the data source.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through entity ID&#x27;s associated with a statistic.  The value is specified as bound on the entity ID values returned.  The type of bound is given by the  &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned entity ID values must satisfy the condition that they are strictly greater than the entity ID bound value. To move to the \&quot;next page\&quot; of entity ID&#x27;s specify the greatest entity ID value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;. To move to the \&quot;previous page\&quot; of entity ID&#x27;s specify the least entity ID value on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least entity ID value on the current page and specify a &#x60;boundType&#x60; of  &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getAmbiguouslyMatchedEntityIds(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedEntitiesResponse>;
     public getAmbiguouslyMatchedEntityIds(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedEntitiesResponse>>;
     public getAmbiguouslyMatchedEntityIds(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedEntitiesResponse>>;
     public getAmbiguouslyMatchedEntityIds(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getAmbiguouslyMatchedEntityIds.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedEntitiesResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/ambiguous-matches/entities`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the &#x60;SzRelation&#x60; values describing the ambiguous-match relationships between entities where each entity contains a record from the respective data source.
      * Gets the &#x60;SzRelation&#x60; values describing the ambiguous-match relationships between entities containing a record from the respective data source.  If there are no such relationships then this will return a 200 OK response that will have an empty array of &#x60;SzRelation&#x60; values rather than giving a 404 Not Found response.  Further, if there are no relationships for entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the &#x60;SzRelation&#x60; array contained in the response will be empty.  However, if the data source code is not found in the configuration then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.        
      * @param dataSourceCode The data source code identifying the data source.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through relationships associated with a statistic.  The value is specified as bound on the entity ID&#x27;s in the &#x60;SzRelation&#x60; values returned and contains two  entity ID values separated by a colon (e.g.: &#x60;1000:5500&#x60;).  The type of bound is given by the &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned &#x60;SzRelation&#x60; values must be canonically greater than the relationship described by the  entity ID values encoded in the bound.  &#x60;SzRelation&#x60; values are ordered  on the first entity ID value and then on the second related entity ID value.  To move to the \&quot;next page\&quot; of relationships specify the encoded value of the entity ID and related ID of the greatest (last) &#x60;SzRelation&#x60; on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the \&quot;previous page\&quot; of relationships specify the encoded value of the entity ID and related ID of the least (first) &#x60;SzRelation&#x60; on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the encoded value of the entity ID and related ID of the least (first) &#x60;SzRelation&#x60; on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getAmbiguouslyMatchedRelations(dataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedRelationsResponse>;
     public getAmbiguouslyMatchedRelations(dataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedRelationsResponse>>;
     public getAmbiguouslyMatchedRelations(dataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedRelationsResponse>>;
     public getAmbiguouslyMatchedRelations(dataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getAmbiguouslyMatchedRelations.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedRelationsResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/ambiguous-matches/relations`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the cross-summary statistics for ambiguous-match relations between entities having at least one record from one data source and entities having at least one record from another data source (which may be the same), optionally for one or more combination of match key and principle.
      * Gets the cross-summary statisitcs for ambiguous-match relations between entities having at least one record from a primary data source and entities having at least one record another data source (which may be the same), optionally for one or more combination of match key and principle.  If either of the specified data source codes is not configured then a 404 Not Found response is returned.  *NOTE*:  Data mart statistics may be slightly delayed from the entity repository.
      * @param dataSourceCode The data source code identifying the data source.
      * @param vsDataSourceCode The data source code identifying the data source to which the first data source is compared for the statistics.
      * @param matchKey The optional parameter to specify a match key for which the statistics are being requested.  Specify an asterisk (&#x60;*&#x60;) if the statistics for  all match keys should be returned. 
      * @param principle The optional parameter to specify a principle for which the statistics are being requested.  Specify an asterisk (&#x60;*&#x60;) if the statistics for  all principles should be returned. 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getCrossSourceAmbiguousMatchStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'body', reportProgress?: boolean): Observable<SzRelationCountsResponse>;
     public getCrossSourceAmbiguousMatchStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzRelationCountsResponse>>;
     public getCrossSourceAmbiguousMatchStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzRelationCountsResponse>>;
     public getCrossSourceAmbiguousMatchStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getCrossSourceAmbiguousMatchStatistics.');
         }
 
         if (vsDataSourceCode === null || vsDataSourceCode === undefined) {
             throw new Error('Required parameter vsDataSourceCode was null or undefined when calling getCrossSourceAmbiguousMatchStatistics.');
         }
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzRelationCountsResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/vs/${encodeURIComponent(String(vsDataSourceCode))}/ambiguous-matches`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the cross-summary statistics for disclosed relations between entities having at least one record from one data source and entities having at least one record from another data source (which may be the same), optionally for one or more combination of match key and principle.
      * Gets the cross-summary statisitcs for disclosed relations between entities having at least one record from a primary data source and entities having at least one record another data source (which may be the same), optionally for one or more combination of match key and principle.  If either of the specified data source codes is not configured then a 404 Not Found response is returned.  *NOTE*:  Data mart statistics may be slightly delayed from the entity repository.
      * @param dataSourceCode The data source code identifying the data source.
      * @param vsDataSourceCode The data source code identifying the data source to which the first data source is compared for the statistics.
      * @param matchKey The optional parameter to specify a match key for which the statistics are being requested.  Specify an asterisk (&#x60;*&#x60;) if the statistics for  all match keys should be returned. 
      * @param principle The optional parameter to specify a principle for which the statistics are being requested.  Specify an asterisk (&#x60;*&#x60;) if the statistics for  all principles should be returned. 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getCrossSourceDisclosedRelationStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'body', reportProgress?: boolean): Observable<SzRelationCountsResponse>;
     public getCrossSourceDisclosedRelationStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzRelationCountsResponse>>;
     public getCrossSourceDisclosedRelationStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzRelationCountsResponse>>;
     public getCrossSourceDisclosedRelationStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getCrossSourceDisclosedRelationStatistics.');
         }
 
         if (vsDataSourceCode === null || vsDataSourceCode === undefined) {
             throw new Error('Required parameter vsDataSourceCode was null or undefined when calling getCrossSourceDisclosedRelationStatistics.');
         }
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzRelationCountsResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/vs/${encodeURIComponent(String(vsDataSourceCode))}/disclosed-relations`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the cross-summary statistics for matches for entities having at least one record from a primary data source and at least one **other** record from another data source (which may be the same data source),  optionally for one or more combination of match key and principle.
      * Gets the cross-summary statisitcs for matches between a primary data source and another data source (which may be the same), optionally for one or more combination of match key and principle.  If either of the specified data source codes is not configured then a 404 Not Found response is returned.  *NOTE*:  Data mart statistics may be slightly delayed from the entity repository.
      * @param dataSourceCode The data source code identifying the data source.
      * @param vsDataSourceCode The data source code identifying the data source to which the first data source is compared for the statistics.
      * @param matchKey The optional parameter to specify a match key for which the statistics are being requested.  Specify an asterisk (&#x60;*&#x60;) if the statistics for  all match keys should be returned. 
      * @param principle The optional parameter to specify a principle for which the statistics are being requested.  Specify an asterisk (&#x60;*&#x60;) if the statistics for  all principles should be returned. 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getCrossSourceMatchStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'body', reportProgress?: boolean): Observable<SzMatchCountsResponse>;
     public getCrossSourceMatchStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzMatchCountsResponse>>;
     public getCrossSourceMatchStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzMatchCountsResponse>>;
     public getCrossSourceMatchStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getCrossSourceMatchStatistics.');
         }
 
         if (vsDataSourceCode === null || vsDataSourceCode === undefined) {
             throw new Error('Required parameter vsDataSourceCode was null or undefined when calling getCrossSourceMatchStatistics.');
         }
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzMatchCountsResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/vs/${encodeURIComponent(String(vsDataSourceCode))}/matches`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the cross-summary statistics for possible-match relations between entities having at least one record from one data source and entities having at least one record from another data source (which may be the same), optionally for one or more combination of match key and principle.
      * Gets the cross-summary statisitcs for possible-match relations between entities having at least one record from a primary data source and entities having at least one record another data source (which may be the same), optionally for one or more combination of match key and principle.  If either of the specified data source codes is not configured then a 404 Not Found response is returned.  *NOTE*:  Data mart statistics may be slightly delayed from the entity repository.
      * @param dataSourceCode The data source code identifying the data source.
      * @param vsDataSourceCode The data source code identifying the data source to which the first data source is compared for the statistics.
      * @param matchKey The optional parameter to specify a match key for which the statistics are being requested.  Specify an asterisk (&#x60;*&#x60;) if the statistics for  all match keys should be returned. 
      * @param principle The optional parameter to specify a principle for which the statistics are being requested.  Specify an asterisk (&#x60;*&#x60;) if the statistics for  all principles should be returned. 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getCrossSourcePossibleMatchStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'body', reportProgress?: boolean): Observable<SzRelationCountsResponse>;
     public getCrossSourcePossibleMatchStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzRelationCountsResponse>>;
     public getCrossSourcePossibleMatchStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzRelationCountsResponse>>;
     public getCrossSourcePossibleMatchStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getCrossSourcePossibleMatchStatistics.');
         }
 
         if (vsDataSourceCode === null || vsDataSourceCode === undefined) {
             throw new Error('Required parameter vsDataSourceCode was null or undefined when calling getCrossSourcePossibleMatchStatistics.');
         }
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzRelationCountsResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/vs/${encodeURIComponent(String(vsDataSourceCode))}/possible-matches`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the cross-summary statistics for possible relations between entities having at least one record from one data source and entities having at least one record from another data source (which may be the same), optionally for one or more combination of match key and principle.
      * Gets the cross-summary statisitcs for possible relations between entities having at least one record from a primary data source and entities having at least one record another data source (which may be the same), optionally for one or more combination of match key and principle.  If either of the specified data source codes is not configured then a 404 Not Found response is returned.  *NOTE*:  Data mart statistics may be slightly delayed from the entity repository.
      * @param dataSourceCode The data source code identifying the data source.
      * @param vsDataSourceCode The data source code identifying the data source to which the first data source is compared for the statistics.
      * @param matchKey The optional parameter to specify a match key for which the statistics are being requested.  Specify an asterisk (&#x60;*&#x60;) if the statistics for  all match keys should be returned. 
      * @param principle The optional parameter to specify a principle for which the statistics are being requested.  Specify an asterisk (&#x60;*&#x60;) if the statistics for  all principles should be returned. 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getCrossSourcePossibleRelationStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'body', reportProgress?: boolean): Observable<SzRelationCountsResponse>;
     public getCrossSourcePossibleRelationStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzRelationCountsResponse>>;
     public getCrossSourcePossibleRelationStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzRelationCountsResponse>>;
     public getCrossSourcePossibleRelationStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getCrossSourcePossibleRelationStatistics.');
         }
 
         if (vsDataSourceCode === null || vsDataSourceCode === undefined) {
             throw new Error('Required parameter vsDataSourceCode was null or undefined when calling getCrossSourcePossibleRelationStatistics.');
         }
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzRelationCountsResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/vs/${encodeURIComponent(String(vsDataSourceCode))}/possible-relations`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the cross-summary statistics for one data source versus another data source (which may be the same).
      * Gets the cross-summary statisitcs for a primary data source versus another data source (which may be the same).  If either of the specified data source codes is not configured then a 404 Not Found response is returned. *NOTE*:  Data mart statistics may be slightly delayed from the entity repository.
      * @param dataSourceCode The data source code identifying the data source.
      * @param vsDataSourceCode The data source code identifying the data source to which the first data source is compared for the statistics.
      * @param matchKey The optional parameter to specify a match key for which the statistics are being requested.  Specify an asterisk (&#x60;*&#x60;) if the statistics for  all match keys should be returned. 
      * @param principle The optional parameter to specify a principle for which the statistics are being requested.  Specify an asterisk (&#x60;*&#x60;) if the statistics for  all principles should be returned. 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getCrossSourceSummaryStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'body', reportProgress?: boolean): Observable<SzCrossSourceSummaryResponse>;
     public getCrossSourceSummaryStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzCrossSourceSummaryResponse>>;
     public getCrossSourceSummaryStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzCrossSourceSummaryResponse>>;
     public getCrossSourceSummaryStatistics(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getCrossSourceSummaryStatistics.');
         }
 
         if (vsDataSourceCode === null || vsDataSourceCode === undefined) {
             throw new Error('Required parameter vsDataSourceCode was null or undefined when calling getCrossSourceSummaryStatistics.');
         }
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzCrossSourceSummaryResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/vs/${encodeURIComponent(String(vsDataSourceCode))}`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the entity ID&#x27;s of the entities having at least one record from the first data source and a disclosed relationship to an entity having at least one record from the versus data source.
      * Gets the entity ID&#x27;s of the entities having at least one record from the first data source and a disclosed relationship to an entity having at least one record from the versus data source.  If there are no such entities then this will return a 200 OK response that will have an empty array of  entity ID values rather than giving a 404 Not Found response.  Further, if there are no entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the entity ID array contained in the response will be empty.  However, if either data source code is not found in the configuration then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.        
      * @param dataSourceCode The data source code identifying the data source.
      * @param vsDataSourceCode The data source code identifying the data source to which the first data source is compared for the statistics.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through entity ID&#x27;s associated with a statistic.  The value is specified as bound on the entity ID values returned.  The type of bound is given by the  &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned entity ID values must satisfy the condition that they are strictly greater than the entity ID bound value. To move to the \&quot;next page\&quot; of entity ID&#x27;s specify the greatest entity ID value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;. To move to the \&quot;previous page\&quot; of entity ID&#x27;s specify the least entity ID value on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least entity ID value on the current page and specify a &#x60;boundType&#x60; of  &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getDisclosedCrossRelatedEntityIds(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedEntitiesResponse>;
     public getDisclosedCrossRelatedEntityIds(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedEntitiesResponse>>;
     public getDisclosedCrossRelatedEntityIds(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedEntitiesResponse>>;
     public getDisclosedCrossRelatedEntityIds(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getDisclosedCrossRelatedEntityIds.');
         }
 
         if (vsDataSourceCode === null || vsDataSourceCode === undefined) {
             throw new Error('Required parameter vsDataSourceCode was null or undefined when calling getDisclosedCrossRelatedEntityIds.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedEntitiesResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/vs/${encodeURIComponent(String(vsDataSourceCode))}/disclosed-relations/entities`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the &#x60;SzRelation&#x60; values describing the disclosed relationships between entities having at least one record from the first data source and entities having at least one record from the versus data source.
      * Gets the &#x60;SzRelation&#x60; values describing the disclosed relationships between entities containing at least one record from the first data source and another entity having at least one record from the versus data source.  If there are no such relationships then this will return a 200 OK response that will have an empty array of &#x60;SzRelation&#x60; values rather than giving a 404 Not Found response.  Further, if there are no relationships for entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the &#x60;SzRelation&#x60; array contained in the response will be empty.  However, if either data source code is not found in the configuration then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly  delayed from the entity repository.        
      * @param dataSourceCode The data source code identifying the data source.
      * @param vsDataSourceCode The data source code identifying the data source to which the first data source is compared for the statistics.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through relationships associated with a statistic.  The value is specified as bound on the entity ID&#x27;s in the &#x60;SzRelation&#x60; values returned and contains two  entity ID values separated by a colon (e.g.: &#x60;1000:5500&#x60;).  The type of bound is given by the &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned &#x60;SzRelation&#x60; values must be canonically greater than the relationship described by the  entity ID values encoded in the bound.  &#x60;SzRelation&#x60; values are ordered  on the first entity ID value and then on the second related entity ID value.  To move to the \&quot;next page\&quot; of relationships specify the encoded value of the entity ID and related ID of the greatest (last) &#x60;SzRelation&#x60; on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the \&quot;previous page\&quot; of relationships specify the encoded value of the entity ID and related ID of the least (first) &#x60;SzRelation&#x60; on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the encoded value of the entity ID and related ID of the least (first) &#x60;SzRelation&#x60; on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getDisclosedCrossRelatedRelations(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedRelationsResponse>;
     public getDisclosedCrossRelatedRelations(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedRelationsResponse>>;
     public getDisclosedCrossRelatedRelations(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedRelationsResponse>>;
     public getDisclosedCrossRelatedRelations(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getDisclosedCrossRelatedRelations.');
         }
 
         if (vsDataSourceCode === null || vsDataSourceCode === undefined) {
             throw new Error('Required parameter vsDataSourceCode was null or undefined when calling getDisclosedCrossRelatedRelations.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedRelationsResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/vs/${encodeURIComponent(String(vsDataSourceCode))}/disclosed-relations/relations`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the entity ID&#x27;s of the entities having disclosed relationships to other entities where each entity contains a record from the respective data source.
      * Gets the entity ID&#x27;s of the entities having disclosed relationships to other entities where each entity contains a record fron the respective data source. If there are no such entities then this will return a 200 OK response that will have an empty array of entity ID values rather than giving a 404 Not Found response.  Further, if there are no entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the entity ID array contained in the response will be empty.  However, if the data source code is not found in the configuration then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.
      * @param dataSourceCode The data source code identifying the data source.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through entity ID&#x27;s associated with a statistic.  The value is specified as bound on the entity ID values returned.  The type of bound is given by the  &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned entity ID values must satisfy the condition that they are strictly greater than the entity ID bound value. To move to the \&quot;next page\&quot; of entity ID&#x27;s specify the greatest entity ID value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;. To move to the \&quot;previous page\&quot; of entity ID&#x27;s specify the least entity ID value on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least entity ID value on the current page and specify a &#x60;boundType&#x60; of  &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getDisclosedRelatedEntityIds(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedEntitiesResponse>;
     public getDisclosedRelatedEntityIds(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedEntitiesResponse>>;
     public getDisclosedRelatedEntityIds(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedEntitiesResponse>>;
     public getDisclosedRelatedEntityIds(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getDisclosedRelatedEntityIds.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedEntitiesResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/disclosed-relations/entities`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the &#x60;SzRelation&#x60; values describing the disclosed relationships between entities where each entity contains a record from the respective data source.
      * Gets the &#x60;SzRelation&#x60; values describing the disclosed relationships between entities containing a record from the respective data source.  If there are no such relationships then this will return a 200 OK response that will have an empty array of &#x60;SzRelation&#x60; values rather than giving a 404 Not Found response.  Further, if there are no relationships for entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the &#x60;SzRelation&#x60; array contained in the response will be empty. However, if the data source code is not found in the configuration then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.
      * @param dataSourceCode The data source code identifying the data source.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through relationships associated with a statistic.  The value is specified as bound on the entity ID&#x27;s in the &#x60;SzRelation&#x60; values returned and contains two  entity ID values separated by a colon (e.g.: &#x60;1000:5500&#x60;).  The type of bound is given by the &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned &#x60;SzRelation&#x60; values must be canonically greater than the relationship described by the  entity ID values encoded in the bound.  &#x60;SzRelation&#x60; values are ordered  on the first entity ID value and then on the second related entity ID value.  To move to the \&quot;next page\&quot; of relationships specify the encoded value of the entity ID and related ID of the greatest (last) &#x60;SzRelation&#x60; on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the \&quot;previous page\&quot; of relationships specify the encoded value of the entity ID and related ID of the least (first) &#x60;SzRelation&#x60; on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the encoded value of the entity ID and related ID of the least (first) &#x60;SzRelation&#x60; on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getDisclosedRelatedRelations(dataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedRelationsResponse>;
     public getDisclosedRelatedRelations(dataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedRelationsResponse>>;
     public getDisclosedRelatedRelations(dataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedRelationsResponse>>;
     public getDisclosedRelatedRelations(dataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getDisclosedRelatedRelations.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedRelationsResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/disclosed-relations/relations`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the entity ID&#x27;s of the entities having at least one record from the first data source and at least one other record from the versus data source.
      * Gets the entity ID&#x27;s of the entities having at least one record from the  first data source and at least one record from the versus data source.  If no entities have at least one record from the first data source and at least one other record from the versus data source then this will return a 200 OK  response that will have an empty array of entity ID&#x27;s rather than giving a 404 Not Found response.  Further, if there are no entity ID&#x27;s for entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the array of ID&#x27;s contained in the response will be empty.  However, if either data source code is not found in the configuration  then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.
      * @param dataSourceCode The data source code identifying the data source.
      * @param vsDataSourceCode The data source code identifying the data source to which the first data source is compared for the statistics.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through entity ID&#x27;s associated with a statistic.  The value is specified as bound on the entity ID values returned.  The type of bound is given by the  &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned entity ID values must satisfy the condition that they are strictly greater than the entity ID bound value. To move to the \&quot;next page\&quot; of entity ID&#x27;s specify the greatest entity ID value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;. To move to the \&quot;previous page\&quot; of entity ID&#x27;s specify the least entity ID value on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least entity ID value on the current page and specify a &#x60;boundType&#x60; of  &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getEntityIdsForCrossMatches(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedEntitiesResponse>;
     public getEntityIdsForCrossMatches(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedEntitiesResponse>>;
     public getEntityIdsForCrossMatches(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedEntitiesResponse>>;
     public getEntityIdsForCrossMatches(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getEntityIdsForCrossMatches.');
         }
 
         if (vsDataSourceCode === null || vsDataSourceCode === undefined) {
             throw new Error('Required parameter vsDataSourceCode was null or undefined when calling getEntityIdsForCrossMatches.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedEntitiesResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/vs/${encodeURIComponent(String(vsDataSourceCode))}/matches/entities`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the entity ID&#x27;s of the entities having at least one record from the respective data source.
      * Gets the entity ID&#x27;s of the entities having at least one record from the respective data source.  If no records have been loaded for that data source then this will return a 200 OK response that will have an empty array of entity ID&#x27;s rather than giving a 404 Not Found response.  However, the data  source code in the path is not configured then this will return a 404 Not Found response.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.        
      * @param dataSourceCode The data source code identifying the data source.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through entity ID&#x27;s associated with a statistic.  The value is specified as bound on the entity ID values returned.  The type of bound is given by the  &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned entity ID values must satisfy the condition that they are strictly greater than the entity ID bound value. To move to the \&quot;next page\&quot; of entity ID&#x27;s specify the greatest entity ID value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;. To move to the \&quot;previous page\&quot; of entity ID&#x27;s specify the least entity ID value on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least entity ID value on the current page and specify a &#x60;boundType&#x60; of  &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getEntityIdsForDataSource(dataSourceCode: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedEntitiesResponse>;
     public getEntityIdsForDataSource(dataSourceCode: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedEntitiesResponse>>;
     public getEntityIdsForDataSource(dataSourceCode: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedEntitiesResponse>>;
     public getEntityIdsForDataSource(dataSourceCode: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getEntityIdsForDataSource.');
         }
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedEntitiesResponse>('get',`${this.basePath}/statistics/loaded/data-sources/${encodeURIComponent(String(dataSourceCode))}/entities`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the entity ID&#x27;s of the entities having the specific number of entity relationships.
      * Gets the entity ID&#x27;s of the entities having the respective number of entity relations.  If no entities have the respective number of entity relations then this will return a 200 OK response that will have an empty array of entity ID&#x27;s rather than giving a 404 Not Found response.  Further, if there are no entity ID&#x27;s for entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the array of ID&#x27;s contained in the response will be empty.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.        
      * @param relationsCount The number of relationships for the entities of interest.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through entity ID&#x27;s associated with a statistic.  The value is specified as bound on the entity ID values returned.  The type of bound is given by the  &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned entity ID values must satisfy the condition that they are strictly greater than the entity ID bound value. To move to the \&quot;next page\&quot; of entity ID&#x27;s specify the greatest entity ID value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;. To move to the \&quot;previous page\&quot; of entity ID&#x27;s specify the least entity ID value on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least entity ID value on the current page and specify a &#x60;boundType&#x60; of  &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getEntityIdsForEntityRelations(relationsCount: number, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedEntitiesResponse>;
     public getEntityIdsForEntityRelations(relationsCount: number, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedEntitiesResponse>>;
     public getEntityIdsForEntityRelations(relationsCount: number, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedEntitiesResponse>>;
     public getEntityIdsForEntityRelations(relationsCount: number, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (relationsCount === null || relationsCount === undefined) {
             throw new Error('Required parameter relationsCount was null or undefined when calling getEntityIdsForEntityRelations.');
         }
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedEntitiesResponse>('get',`${this.basePath}/statistics/relations/${encodeURIComponent(String(relationsCount))}/entities`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the entity ID&#x27;s of the entities having the specific number of records.
      * Gets the entity ID&#x27;s of the entities having the number of records for the specified entity size.  If no entities have the specified number of records then this will return a 200 OK response that will have an empty array of entity ID&#x27;s rather than giving a 404 Not Found response.  Further, if there are no entity ID&#x27;s for entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the array of ID&#x27;s contained in the response will be empty.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.        
      * @param entitySize The number of records for the entities of interest.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through entity ID&#x27;s associated with a statistic.  The value is specified as bound on the entity ID values returned.  The type of bound is given by the  &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned entity ID values must satisfy the condition that they are strictly greater than the entity ID bound value. To move to the \&quot;next page\&quot; of entity ID&#x27;s specify the greatest entity ID value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;. To move to the \&quot;previous page\&quot; of entity ID&#x27;s specify the least entity ID value on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least entity ID value on the current page and specify a &#x60;boundType&#x60; of  &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getEntityIdsForEntitySize(entitySize: number, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedEntitiesResponse>;
     public getEntityIdsForEntitySize(entitySize: number, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedEntitiesResponse>>;
     public getEntityIdsForEntitySize(entitySize: number, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedEntitiesResponse>>;
     public getEntityIdsForEntitySize(entitySize: number, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (entitySize === null || entitySize === undefined) {
             throw new Error('Required parameter entitySize was null or undefined when calling getEntityIdsForEntitySize.');
         }
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedEntitiesResponse>('get',`${this.basePath}/statistics/sizes/${encodeURIComponent(String(entitySize))}/entities`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the entity ID&#x27;s of the entities containing two or more matched records from the respective data source.
      * Gets the entity ID&#x27;s of the entities having at two or more matched records  from the respective data source.  If no entities have at least two matched records from the respective data source then this will return a 200 OK  response that will have an empty array of entity ID&#x27;s rather than giving a 404 Not Found response.  Further, if there are no entity ID&#x27;s for entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the array of ID&#x27;s contained in the response will be empty.  However, if the data source code is not found in the configuration  then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.        
      * @param dataSourceCode The data source code identifying the data source.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through entity ID&#x27;s associated with a statistic.  The value is specified as bound on the entity ID values returned.  The type of bound is given by the  &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned entity ID values must satisfy the condition that they are strictly greater than the entity ID bound value. To move to the \&quot;next page\&quot; of entity ID&#x27;s specify the greatest entity ID value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;. To move to the \&quot;previous page\&quot; of entity ID&#x27;s specify the least entity ID value on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least entity ID value on the current page and specify a &#x60;boundType&#x60; of  &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getEntityIdsForSourceMatches(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedEntitiesResponse>;
     public getEntityIdsForSourceMatches(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedEntitiesResponse>>;
     public getEntityIdsForSourceMatches(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedEntitiesResponse>>;
     public getEntityIdsForSourceMatches(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getEntityIdsForSourceMatches.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedEntitiesResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/matches/entities`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the entity counts by the number of entity relations (Entity  Relation Breakdown).
      * Gets the number of entities in the repository for each number of entity relations that exists for those entities.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getEntityRelationsBreakdown(observe?: 'body', reportProgress?: boolean): Observable<SzEntityRelationsBreakdownResponse>;
     public getEntityRelationsBreakdown(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzEntityRelationsBreakdownResponse>>;
     public getEntityRelationsBreakdown(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzEntityRelationsBreakdownResponse>>;
     public getEntityRelationsBreakdown(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzEntityRelationsBreakdownResponse>('get',`${this.basePath}/statistics/relations`,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the count of entities having the specific number of entity relations.
      * Gets the count of entities having the specific number of entity relations. If there are NO entities having the specified number of entity relations then this will return a 200 OK response with the result indicating a count of zero entities rather than giving a 404 Not Found response.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.
      * @param relationsCount The number of relationships for the entities of interest.
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getEntityRelationsCount(relationsCount: number, observe?: 'body', reportProgress?: boolean): Observable<SzEntityRelationsCountResponse>;
     public getEntityRelationsCount(relationsCount: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzEntityRelationsCountResponse>>;
     public getEntityRelationsCount(relationsCount: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzEntityRelationsCountResponse>>;
     public getEntityRelationsCount(relationsCount: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (relationsCount === null || relationsCount === undefined) {
             throw new Error('Required parameter relationsCount was null or undefined when calling getEntityRelationsCount.');
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzEntityRelationsCountResponse>('get',`${this.basePath}/statistics/relations/${encodeURIComponent(String(relationsCount))}`,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the entity counts by entity size (Entity Size Breakdown).
      * Gets the number of entities in the repository for each entity size  that exists.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getEntitySizeBreakdown(observe?: 'body', reportProgress?: boolean): Observable<SzEntitySizeBreakdownResponse>;
     public getEntitySizeBreakdown(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzEntitySizeBreakdownResponse>>;
     public getEntitySizeBreakdown(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzEntitySizeBreakdownResponse>>;
     public getEntitySizeBreakdown(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzEntitySizeBreakdownResponse>('get',`${this.basePath}/statistics/sizes`,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the count of entities having the specific number of records.
      * Gets the count of entities having the specific number of records. If there are NO entities having the specified number of records then this will return a 200 OK response with the result indicating a count of zero entities rather than giving a 404 Not Found response. *NOTE*: Data mart statistics may be slightly delayed from the entity repository.
      * @param entitySize The number of records for the entities of interest.
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getEntitySizeCount(entitySize: number, observe?: 'body', reportProgress?: boolean): Observable<SzEntitySizeCountResponse>;
     public getEntitySizeCount(entitySize: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzEntitySizeCountResponse>>;
     public getEntitySizeCount(entitySize: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzEntitySizeCountResponse>>;
     public getEntitySizeCount(entitySize: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (entitySize === null || entitySize === undefined) {
             throw new Error('Required parameter entitySize was null or undefined when calling getEntitySizeCount.');
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzEntitySizeCountResponse>('get',`${this.basePath}/statistics/sizes/${encodeURIComponent(String(entitySize))}`,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the entity and record counts in total and by data source from the data mart.
      * Gets the entity and record counts in total and by data source from the data mart.  *NOTE*: Data mart statistics may be slightly delayed from  the entity repository.
      * @param onlyLoadedSources The optional parameter to specify if only loaded data sources should be considered when iterating over data sources to retrieve statistics. If not specified, this defaults to &#x60;true&#x60;.  Set this explicitly to &#x60;false&#x60; to iterate over all data sources regardless of loaded records in generating the statistics (i.e.: to include the \&quot;zeroes\&quot;).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getLoadedStatistics(onlyLoadedSources?: boolean, observe?: 'body', reportProgress?: boolean): Observable<SzLoadedStatsResponse>;
     public getLoadedStatistics(onlyLoadedSources?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzLoadedStatsResponse>>;
     public getLoadedStatistics(onlyLoadedSources?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzLoadedStatsResponse>>;
     public getLoadedStatistics(onlyLoadedSources?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (onlyLoadedSources !== undefined && onlyLoadedSources !== null) {
             queryParameters = queryParameters.set('onlyLoadedSources', <any>onlyLoadedSources);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzLoadedStatsResponse>('get',`${this.basePath}/statistics/loaded`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the entity ID&#x27;s of the entities having at least one record from the first data source and a possible-match relationship to an entity having at least one record from the versus data source.
      * Gets the entity ID&#x27;s of the entities having at least one record from the first data source and a possible-match relationship to an entity having at least one record from the versus data source.  If there are no such entities then this will return a 200 OK response that will have an empty array of entity ID values rather than giving a 404 Not Found response. Further, if there are no entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the entity ID array contained in the response will be empty.  However, if either data source code is not found in the configuration then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.        
      * @param dataSourceCode The data source code identifying the data source.
      * @param vsDataSourceCode The data source code identifying the data source to which the first data source is compared for the statistics.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through entity ID&#x27;s associated with a statistic.  The value is specified as bound on the entity ID values returned.  The type of bound is given by the  &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned entity ID values must satisfy the condition that they are strictly greater than the entity ID bound value. To move to the \&quot;next page\&quot; of entity ID&#x27;s specify the greatest entity ID value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;. To move to the \&quot;previous page\&quot; of entity ID&#x27;s specify the least entity ID value on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least entity ID value on the current page and specify a &#x60;boundType&#x60; of  &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getPossiblyCrossMatchedEntityIds(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedEntitiesResponse>;
     public getPossiblyCrossMatchedEntityIds(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedEntitiesResponse>>;
     public getPossiblyCrossMatchedEntityIds(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedEntitiesResponse>>;
     public getPossiblyCrossMatchedEntityIds(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getPossiblyCrossMatchedEntityIds.');
         }
 
         if (vsDataSourceCode === null || vsDataSourceCode === undefined) {
             throw new Error('Required parameter vsDataSourceCode was null or undefined when calling getPossiblyCrossMatchedEntityIds.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedEntitiesResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/vs/${encodeURIComponent(String(vsDataSourceCode))}/possible-matches/entities`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the &#x60;SzRelation&#x60; values describing the possible-match relationships between entities having at least one record from the first data source and entities having at least one record from the versus data source.
      * Gets the &#x60;SzRelation&#x60; values describing the possible-match relationships between entities containing at least one record from the first data source and another entity having at least one record from the versus data source. If there are no such relationships then this will return a 200 OK response that will have an empty array of &#x60;SzRelation&#x60; values rather than giving a 404 Not Found response.  Further, if there are no relationships for entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the &#x60;SzRelation&#x60; array contained in the response will be empty.  However, if either data source code is not found in the configuration then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.        
      * @param dataSourceCode The data source code identifying the data source.
      * @param vsDataSourceCode The data source code identifying the data source to which the first data source is compared for the statistics.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through relationships associated with a statistic.  The value is specified as bound on the entity ID&#x27;s in the &#x60;SzRelation&#x60; values returned and contains two  entity ID values separated by a colon (e.g.: &#x60;1000:5500&#x60;).  The type of bound is given by the &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned &#x60;SzRelation&#x60; values must be canonically greater than the relationship described by the  entity ID values encoded in the bound.  &#x60;SzRelation&#x60; values are ordered  on the first entity ID value and then on the second related entity ID value.  To move to the \&quot;next page\&quot; of relationships specify the encoded value of the entity ID and related ID of the greatest (last) &#x60;SzRelation&#x60; on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the \&quot;previous page\&quot; of relationships specify the encoded value of the entity ID and related ID of the least (first) &#x60;SzRelation&#x60; on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the encoded value of the entity ID and related ID of the least (first) &#x60;SzRelation&#x60; on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getPossiblyCrossMatchedRelations(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedRelationsResponse>;
     public getPossiblyCrossMatchedRelations(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedRelationsResponse>>;
     public getPossiblyCrossMatchedRelations(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedRelationsResponse>>;
     public getPossiblyCrossMatchedRelations(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getPossiblyCrossMatchedRelations.');
         }
 
         if (vsDataSourceCode === null || vsDataSourceCode === undefined) {
             throw new Error('Required parameter vsDataSourceCode was null or undefined when calling getPossiblyCrossMatchedRelations.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedRelationsResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/vs/${encodeURIComponent(String(vsDataSourceCode))}/possible-matches/relations`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the entity ID&#x27;s of the entities having at least one record from the first data source and a possible relationship to an entity having at least one record from the versus data source.
      * Gets the entity ID&#x27;s of the entities having at least one record from the first data source and a possible relationship to an entity having at least one record from the versus data source.  If there are no such entities then this will return a 200 OK response that will have an empty array of  entity ID values rather than giving a 404 Not Found response.  Further, if there are no entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the entity ID array contained in the response will be empty.  However, if either data source code is not found in the configuration then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.        
      * @param dataSourceCode The data source code identifying the data source.
      * @param vsDataSourceCode The data source code identifying the data source to which the first data source is compared for the statistics.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through entity ID&#x27;s associated with a statistic.  The value is specified as bound on the entity ID values returned.  The type of bound is given by the  &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned entity ID values must satisfy the condition that they are strictly greater than the entity ID bound value. To move to the \&quot;next page\&quot; of entity ID&#x27;s specify the greatest entity ID value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;. To move to the \&quot;previous page\&quot; of entity ID&#x27;s specify the least entity ID value on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least entity ID value on the current page and specify a &#x60;boundType&#x60; of  &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getPossiblyCrossRelatedEntityIds(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedEntitiesResponse>;
     public getPossiblyCrossRelatedEntityIds(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedEntitiesResponse>>;
     public getPossiblyCrossRelatedEntityIds(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedEntitiesResponse>>;
     public getPossiblyCrossRelatedEntityIds(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getPossiblyCrossRelatedEntityIds.');
         }
 
         if (vsDataSourceCode === null || vsDataSourceCode === undefined) {
             throw new Error('Required parameter vsDataSourceCode was null or undefined when calling getPossiblyCrossRelatedEntityIds.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedEntitiesResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/vs/${encodeURIComponent(String(vsDataSourceCode))}/possible-relations/entities`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the &#x60;SzRelation&#x60; values describing the possible relationships between entities having at least one record from the first data source and entities having at least one record from the versus data source.
      * Gets the &#x60;SzRelation&#x60; values describing the possible relationships between entities containing at least one record from the first data source and another entity having at least one record from the versus data source.  If there are no such relationships then this will return a 200 OK response that will have an empty array of &#x60;SzRelation&#x60; values rather than giving a 404 Not Found response.  Further, if there are no relationships for entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the &#x60;SzRelation&#x60; array contained in the response will be empty.  However, if either data source code is not found in the configuration then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly  delayed from the entity repository.        
      * @param dataSourceCode The data source code identifying the data source.
      * @param vsDataSourceCode The data source code identifying the data source to which the first data source is compared for the statistics.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through relationships associated with a statistic.  The value is specified as bound on the entity ID&#x27;s in the &#x60;SzRelation&#x60; values returned and contains two  entity ID values separated by a colon (e.g.: &#x60;1000:5500&#x60;).  The type of bound is given by the &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned &#x60;SzRelation&#x60; values must be canonically greater than the relationship described by the  entity ID values encoded in the bound.  &#x60;SzRelation&#x60; values are ordered  on the first entity ID value and then on the second related entity ID value.  To move to the \&quot;next page\&quot; of relationships specify the encoded value of the entity ID and related ID of the greatest (last) &#x60;SzRelation&#x60; on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the \&quot;previous page\&quot; of relationships specify the encoded value of the entity ID and related ID of the least (first) &#x60;SzRelation&#x60; on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the encoded value of the entity ID and related ID of the least (first) &#x60;SzRelation&#x60; on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getPossiblyCrossRelatedRelations(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedRelationsResponse>;
     public getPossiblyCrossRelatedRelations(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedRelationsResponse>>;
     public getPossiblyCrossRelatedRelations(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedRelationsResponse>>;
     public getPossiblyCrossRelatedRelations(dataSourceCode: string, vsDataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getPossiblyCrossRelatedRelations.');
         }
 
         if (vsDataSourceCode === null || vsDataSourceCode === undefined) {
             throw new Error('Required parameter vsDataSourceCode was null or undefined when calling getPossiblyCrossRelatedRelations.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedRelationsResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/vs/${encodeURIComponent(String(vsDataSourceCode))}/possible-relations/relations`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the entity ID&#x27;s of the entities having possible-match relationships to other entities where each entity contains a record from the respective data source.
      * Gets the entity ID&#x27;s of the entities having possible-match relationships to other entities where each entity contains a record fron the respective  data source.  If there are no such entities then this will return a 200 OK response that will have an empty array of entity ID values rather than giving a 404 Not Found response.  Further, if there are no entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the entity ID array contained in the response will be empty.  However, if the data source code is not found in the configuration then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.        
      * @param dataSourceCode The data source code identifying the data source.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through entity ID&#x27;s associated with a statistic.  The value is specified as bound on the entity ID values returned.  The type of bound is given by the  &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned entity ID values must satisfy the condition that they are strictly greater than the entity ID bound value. To move to the \&quot;next page\&quot; of entity ID&#x27;s specify the greatest entity ID value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;. To move to the \&quot;previous page\&quot; of entity ID&#x27;s specify the least entity ID value on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least entity ID value on the current page and specify a &#x60;boundType&#x60; of  &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getPossiblyMatchedEntityIds(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedEntitiesResponse>;
     public getPossiblyMatchedEntityIds(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedEntitiesResponse>>;
     public getPossiblyMatchedEntityIds(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedEntitiesResponse>>;
     public getPossiblyMatchedEntityIds(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getPossiblyMatchedEntityIds.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedEntitiesResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/possible-matches/entities`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the &#x60;SzRelation&#x60; values describing the possible-match relationships between entities where each entity contains a record from the respective data source.
      * Gets the &#x60;SzRelation&#x60; values describing the possible-match relationships between entities containing a record from the respective data source.  If there are no such relationships then this will return a 200 OK response that will have an empty array of &#x60;SzRelation&#x60; values rather than giving a 404 Not Found response.  Further, if there are no relationships for entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the &#x60;SzRelation&#x60; array contained in the response will be empty.  However, if the data source code is not found in the configuration then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.        
      * @param dataSourceCode The data source code identifying the data source.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through relationships associated with a statistic.  The value is specified as bound on the entity ID&#x27;s in the &#x60;SzRelation&#x60; values returned and contains two  entity ID values separated by a colon (e.g.: &#x60;1000:5500&#x60;).  The type of bound is given by the &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned &#x60;SzRelation&#x60; values must be canonically greater than the relationship described by the  entity ID values encoded in the bound.  &#x60;SzRelation&#x60; values are ordered  on the first entity ID value and then on the second related entity ID value.  To move to the \&quot;next page\&quot; of relationships specify the encoded value of the entity ID and related ID of the greatest (last) &#x60;SzRelation&#x60; on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the \&quot;previous page\&quot; of relationships specify the encoded value of the entity ID and related ID of the least (first) &#x60;SzRelation&#x60; on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the encoded value of the entity ID and related ID of the least (first) &#x60;SzRelation&#x60; on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getPossiblyMatchedRelations(dataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedRelationsResponse>;
     public getPossiblyMatchedRelations(dataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedRelationsResponse>>;
     public getPossiblyMatchedRelations(dataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedRelationsResponse>>;
     public getPossiblyMatchedRelations(dataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getPossiblyMatchedRelations.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedRelationsResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/possible-matches/relations`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the entity ID&#x27;s of the entities having possible relationships to other entities where each entity contains a record from the respective data source.
      * Gets the entity ID&#x27;s of the entities having possible relationships to other entities where each entity contains a record fron the respective data source. If there are no such entities then this will return a 200 OK response that will have an empty array of entity ID values rather than giving a 404 Not Found response.  Further, if there are no entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the entity ID array contained in the response will be empty.  However, if the data source code is not found in the configuration then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed  from the entity repository.
      * @param dataSourceCode The data source code identifying the data source.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through entity ID&#x27;s associated with a statistic.  The value is specified as bound on the entity ID values returned.  The type of bound is given by the  &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned entity ID values must satisfy the condition that they are strictly greater than the entity ID bound value. To move to the \&quot;next page\&quot; of entity ID&#x27;s specify the greatest entity ID value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;. To move to the \&quot;previous page\&quot; of entity ID&#x27;s specify the least entity ID value on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least entity ID value on the current page and specify a &#x60;boundType&#x60; of  &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getPossiblyRelatedEntityIds(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedEntitiesResponse>;
     public getPossiblyRelatedEntityIds(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedEntitiesResponse>>;
     public getPossiblyRelatedEntityIds(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedEntitiesResponse>>;
     public getPossiblyRelatedEntityIds(dataSourceCode: string, matchKey?: string, principle?: string, bound?: number, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getPossiblyRelatedEntityIds.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedEntitiesResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/possible-relations/entities`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the &#x60;SzRelation&#x60; values describing the possible relationships between entities where each entity contains a record from the respective data source.
      * Gets the &#x60;SzRelation&#x60; values describing the possible relationships between entities containing a record from the respective data source.  If there are no such relationships then this will return a 200 OK response that will have an empty array of &#x60;SzRelation&#x60; values rather than giving a 404 Not Found response.  Further, if there are no relationships for entities satisfying the bound conditions of the request then similarly a 200 OK response is returned but the &#x60;SzRelation&#x60; array contained in the response will be empty. However, if the data source code is not found in the configuration then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.
      * @param dataSourceCode The data source code identifying the data source.
      * @param matchKey The optional parameter to specify the match key for which the results are being requested.
      * @param principle The optional parameter to specify a principle for which the results are being requested.
      * @param bound The optional parameter to provide for \&quot;paging\&quot; through relationships associated with a statistic.  The value is specified as bound on the entity ID&#x27;s in the &#x60;SzRelation&#x60; values returned and contains two  entity ID values separated by a colon (e.g.: &#x60;1000:5500&#x60;).  The type of bound is given by the &#x60;boundType&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned &#x60;SzRelation&#x60; values must be canonically greater than the relationship described by the  entity ID values encoded in the bound.  &#x60;SzRelation&#x60; values are ordered  on the first entity ID value and then on the second related entity ID value.  To move to the \&quot;next page\&quot; of relationships specify the encoded value of the entity ID and related ID of the greatest (last) &#x60;SzRelation&#x60; on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the \&quot;previous page\&quot; of relationships specify the encoded value of the entity ID and related ID of the least (first) &#x60;SzRelation&#x60; on the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the encoded value of the entity ID and related ID of the least (first) &#x60;SzRelation&#x60; on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.
      * @param boundType The optional parameter to provide for \&quot;paging\&quot; through results associated with a statistic.  The value is specified as an &#x60;SzBoundType&#x60; and the  bound value is given by the &#x60;bound&#x60; parameter.  For example, by default the &#x60;boundType&#x60; is &#x60;EXCLUSIVE_LOWER&#x60; so the returned values must satisfy the condition that they are strictly greater than the bound value.  To move to the \&quot;next page\&quot; of results specify the greatest result value from the current page and use &#x60;boundType&#x60; of &#x60;EXCLUSIVE_LOWER&#x60;.  To move to the  \&quot;previous page\&quot; of results specify the least result value on the current page and use a &#x60;boundType&#x60; of &#x60;EXCLUSIVE_UPPER&#x60;.  To change the number of results shown on the current page specify the least result value on the current page and specify a &#x60;boundType&#x60; of &#x60;INCLUSIVE_LOWER&#x60; with a new &#x60;pageSize&#x60; value.  Possible values are:   * &#x60;INCLUSIVE_LOWER&#x60; - The bound represents an inclusive lower bound whereby                         values satisifying the bound will be greater-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_LOWER&#x60; - The bound represents an exclusive lower bound whereby                          values satisfying the bound will be strictly greater-than                          the value associated with the bound.   * &#x60;INCLUSIVE_UPPER&#x60; - The bound represents an inclusive upper bound whereby                         values satisifying the bound will be less-than or equal                         to the value associated with the bound.   * &#x60;EXCLUSIVE_UPPER&#x60; - The bound represents an exclusive upper bound whereby                          values satisfying the bound will be strictly less-than                          the value associated with the bound.
      * @param pageSize The optional parameter to limit the number of returned results per page. If not specified then a default value is determined.  If the &#x60;sampleSize&#x60; parameter is provided, then this defaults to 20 times the value of the  &#x60;sampleSize&#x60; parameter.  If the &#x60;sampleSize&#x60; parameter is **not** provided then this simply defaults to &#x60;100&#x60;.  If using the &#x60;sampleSize&#x60; query  parameter and specifying a value for the &#x60;pageSize&#x60; then the &#x60;pageSize&#x60;  should be greater than the &#x60;sampleSize&#x60; by at least an order of magnitude in order tp provide an adequate set of results from which to choose a random sample.  For example, a &#x60;pageSize&#x60; of &#x60;1000&#x60; would be appropriate for a  &#x60;sampleSize&#x60; of &#x60;50&#x60; or &#x60;100&#x60;.
      * @param sampleSize The optional parameter to extract a sample of this size from the page of  results being returned.  When using this parameter the caller should typically use a much larger page size (e.g.: 1000 or 5000) and pull a  random sample (e.g.: 50 to 100).  To obtain another sample with no overlap with the previous sample(s), simply change the &#x60;bound&#x60; and &#x60;boundType&#x60; parameter so the eligible results for the page are outside the range of the previous sample(s).  The value of this parameter should be less-than the specified &#x60;pageSize&#x60; query parameter (typically by at least an order of magnitude).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getPossiblyRelatedRelations(dataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'body', reportProgress?: boolean): Observable<SzPagedRelationsResponse>;
     public getPossiblyRelatedRelations(dataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzPagedRelationsResponse>>;
     public getPossiblyRelatedRelations(dataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzPagedRelationsResponse>>;
     public getPossiblyRelatedRelations(dataSourceCode: string, matchKey?: string, principle?: string, bound?: string, boundType?: SzBoundType, pageSize?: number, sampleSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getPossiblyRelatedRelations.');
         }
 
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (bound !== undefined && bound !== null) {
             queryParameters = queryParameters.set('bound', <any>bound);
         }
         if (boundType !== undefined && boundType !== null) {
             queryParameters = queryParameters.set('boundType', <any>boundType);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (sampleSize !== undefined && sampleSize !== null) {
             queryParameters = queryParameters.set('sampleSize', <any>sampleSize);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzPagedRelationsResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}/possible-relations/relations`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the entity and record counts for a specific data source from the data mart.
      * Gets the entity and record counts for a specific data source from the data mart.  If no records have been loaded for the data source then  this returns a 200 OK response with counts of zero.  However, if the data source is not recognized then a 404 Not Found response is returned. *NOTE*: Data mart statistics may be slightly delayed from the entity repository.
      * @param dataSourceCode The data source code identifying the data source.
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getSourceLoadedStatistics(dataSourceCode: string, observe?: 'body', reportProgress?: boolean): Observable<SzSourceLoadedStatsResponse>;
     public getSourceLoadedStatistics(dataSourceCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzSourceLoadedStatsResponse>>;
     public getSourceLoadedStatistics(dataSourceCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzSourceLoadedStatsResponse>>;
     public getSourceLoadedStatistics(dataSourceCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getSourceLoadedStatistics.');
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzSourceLoadedStatsResponse>('get',`${this.basePath}/statistics/loaded/data-sources/${encodeURIComponent(String(dataSourceCode))}`,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the summary statistics for a specific data source versus every other data source including itself.
      * Gets the summary statisitcs for a specific data source versus every other data source including itsef.  If the specified data source code is not configured then a 404 Not Found response is returned.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.
      * @param dataSourceCode The data source code identifying the data source.
      * @param matchKey The optional parameter to specify a match key for which the statistics are being requested.  Specify an asterisk (&#x60;*&#x60;) if the statistics for  all match keys should be returned. 
      * @param principle The optional parameter to specify a principle for which the statistics are being requested.  Specify an asterisk (&#x60;*&#x60;) if the statistics for  all principles should be returned. 
      * @param onlyLoadedSources The optional parameter to specify if only loaded data sources should be considered when iterating over data sources to retrieve statistics. If not specified, this defaults to &#x60;true&#x60;.  Set this explicitly to &#x60;false&#x60; to iterate over all data sources regardless of loaded records in generating the statistics (i.e.: to include the \&quot;zeroes\&quot;).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getSourceSummaryStatistics(dataSourceCode: string, matchKey?: string, principle?: string, onlyLoadedSources?: boolean, observe?: 'body', reportProgress?: boolean): Observable<SzSourceSummaryResponse>;
     public getSourceSummaryStatistics(dataSourceCode: string, matchKey?: string, principle?: string, onlyLoadedSources?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzSourceSummaryResponse>>;
     public getSourceSummaryStatistics(dataSourceCode: string, matchKey?: string, principle?: string, onlyLoadedSources?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzSourceSummaryResponse>>;
     public getSourceSummaryStatistics(dataSourceCode: string, matchKey?: string, principle?: string, onlyLoadedSources?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (dataSourceCode === null || dataSourceCode === undefined) {
             throw new Error('Required parameter dataSourceCode was null or undefined when calling getSourceSummaryStatistics.');
         }
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (onlyLoadedSources !== undefined && onlyLoadedSources !== null) {
             queryParameters = queryParameters.set('onlyLoadedSources', <any>onlyLoadedSources);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzSourceSummaryResponse>('get',`${this.basePath}/statistics/summary/data-sources/${encodeURIComponent(String(dataSourceCode))}`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Gets the summary statistics for each data source versus every other  data source including itself.
      * Gets the summary statisitcs for each data source versus every other data source including itsef.  *NOTE*: Data mart statistics may be slightly delayed from the entity repository.
      * @param matchKey The optional parameter to specify a match key for which the statistics are being requested.  Specify an asterisk (&#x60;*&#x60;) if the statistics for  all match keys should be returned. 
      * @param principle The optional parameter to specify a principle for which the statistics are being requested.  Specify an asterisk (&#x60;*&#x60;) if the statistics for  all principles should be returned. 
      * @param onlyLoadedSources The optional parameter to specify if only loaded data sources should be considered when iterating over data sources to retrieve statistics. If not specified, this defaults to &#x60;true&#x60;.  Set this explicitly to &#x60;false&#x60; to iterate over all data sources regardless of loaded records in generating the statistics (i.e.: to include the \&quot;zeroes\&quot;).
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getSummaryStatistics(matchKey?: string, principle?: string, onlyLoadedSources?: boolean, observe?: 'body', reportProgress?: boolean): Observable<SzSummaryStatsResponse>;
     public getSummaryStatistics(matchKey?: string, principle?: string, onlyLoadedSources?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SzSummaryStatsResponse>>;
     public getSummaryStatistics(matchKey?: string, principle?: string, onlyLoadedSources?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SzSummaryStatsResponse>>;
     public getSummaryStatistics(matchKey?: string, principle?: string, onlyLoadedSources?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (matchKey !== undefined && matchKey !== null) {
             queryParameters = queryParameters.set('matchKey', <any>matchKey);
         }
         if (principle !== undefined && principle !== null) {
             queryParameters = queryParameters.set('principle', <any>principle);
         }
         if (onlyLoadedSources !== undefined && onlyLoadedSources !== null) {
             queryParameters = queryParameters.set('onlyLoadedSources', <any>onlyLoadedSources);
         }
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'application/json; charset=UTF-8',
             'application/json',
             'default'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<SzSummaryStatsResponse>('get',`${this.basePath}/statistics/summary`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
 }
 