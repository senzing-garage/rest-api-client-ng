/**
 * Senzing REST API
 * This is the Senzing REST API.  It describes the REST interface to Senzing API functions available via REST.  It leverages the Senzing native API which is documented at [https://docs.senzing.com](https://docs.senzing.com). <br><br> <b>SSE NOTE:</b> Some end-points described here will indicate \"(Supports SSE)\" to indicate that they support \"Server-sent Events\" via the `text/event-stream` media type.  This support is activated by adding the `Accept: text/event-stream` header to a request to override the default `application/json` media type.  Further, the end-point will behave similarly to its standard operation but will produce `progress` events at regular intervals that are equivalent to its `200` response schema. Upon success, the final event will be `completed` with the same response schema as a `200` response.  Upon failure, the final event will be `failed` with same schema as the `4xx` or `5xx` response (typically the `SzErrorResponse`) <br><br> <b>WEB SOCKETS NOTE:</b> Some end-points described here will indicate \"(Supports WebSockets)\" to indicate that they can invoked via the Web Sockets protocol. This support is activated by invoking the end-point using the `ws://` protocol in the URL.  Any request query parameters can still be sent on the URL and the request body can be sent as one or more message from the client (as documented).  The end-point response will be sent as one or more response messages as documented (sometimes describing progress as with SSE end-points).  Upon failure responses will follow the same schema as the `4xx` or `5xx` response (typically the `SzErrorResponse`)
 *
 * OpenAPI spec version: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Enumerates the various classes of attribute types (and features). This is a generalization over attribute type that is more general than feature type (NOTE: stand-alone attribute types such as \"DATA_SOURCE\" or \"RECORD_ID\" do not have a feature type, but do have an attribute class of \"OBSERVATION\").  Attribute class determines how attributes / features are grouped together (e.g.: \"nameData\" contains all name features and \"identifierData\" contains all identifier features).  The possible values are:   * `ADDRESS` - Attributes pertaining to an address such as \"POSTAL_CODE\"   * `CHARACTERISTIC` - Attributes pertaining to physical characteristics                        of an entity.  Such as \"BIRTH_DATE\"   * `IDENTIFIER` - Attributes pertaining to identifiers such as                   drivers license number, passport number, or email                   address.   * `NAME` - Attributes pertaing to names such as \"NAME_FIRST\" or              \"NAME_LAST\"   * `OBSERVATION` - Attributes pertaining to meta-data about the                     observation (record) such as \"RECORD_ID\" or                     \"DATA_SOURCE\"   * `PHONE` - Attributes pertaining to phone numbers such               \"PHONE_NUMBER\" or \"PHONE_EXTENSION\"   * `RELATIONSHIP` - Attributes pertaining to relationships such as                      \"RELATIONSHIP_TYPE\".   * `OTHER` - An attribute class for custom features or for attributes               that are loaded but not mapped.
 */
export type SzAttributeClass = 'ADDRESS' | 'CHARACTERISTIC' | 'IDENTIFIER' | 'NAME' | 'OBSERVATION' | 'PHONE' | 'RELATIONSHIP' | 'OTHER';

export const SzAttributeClass = {
    ADDRESS: 'ADDRESS' as SzAttributeClass,
    CHARACTERISTIC: 'CHARACTERISTIC' as SzAttributeClass,
    IDENTIFIER: 'IDENTIFIER' as SzAttributeClass,
    NAME: 'NAME' as SzAttributeClass,
    OBSERVATION: 'OBSERVATION' as SzAttributeClass,
    PHONE: 'PHONE' as SzAttributeClass,
    RELATIONSHIP: 'RELATIONSHIP' as SzAttributeClass,
    OTHER: 'OTHER' as SzAttributeClass
};