/**
 * Senzing POC REST API
 * This is the Senzing POC REST API.  This API is <b>NOT</b> maintained for backwards compatibility.  This API extends the [Senzing REST API](https://petstore.swagger.io/?url=https://raw.githubusercontent.com/senzing-garage/senzing-rest-api-specification/main/senzing-rest-api.yaml) which is maintained for backwards compatibility.  However, the Senzing POC API is specifically targeted at the Senzing One-Day POC application and no guarantees are made for support.  It can be used as example for creating your own extended API. <br><br> <b>SSE NOTE:</b> Some end-points described here will indicate \"(Supports SSE)\" to indicate that they support \"Server-sent Events\" via the `text/event-stream` media type.  This support is activated by adding the `Accept: text/event-stream` header to a request to override the default `application/json` media type.  Further, the end-point will behave similarly to its standard operation but will produce `progress` events at regular intervals that are equivalent to its `200` response schema. Upon success, the final event will be `completed` with the same response schema as a `200` response.  Upon failure, the final event will be `failed` with same schema as the `4xx` or `5xx` response (typically the `SzErrorResponse`) <br><br> <b>WEB SOCKETS NOTE:</b> Some end-points described here will indicate \"(Supports WebSockets)\" to indicate that they can invoked via the Web Sockets protocol. This support is activated by invoking the end-point using the `ws://` protocol in the URL.  Any request query parameters can still be sent on the URL and the request body can be sent as one or more message from the client (as documented).  The end-point response will be sent as one or more response messages as documented (sometimes describing progress as with SSE end-points).  Upon failure responses will follow the same schema as the `4xx` or `5xx` response (typically the `SzErrorResponse`)
 *
 * OpenAPI spec version: 3.5.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { SzBoundType } from './szBoundType';
import { SzRelation } from './szRelation';

/**
 * Encapsulates a paged list of `SzRelation` values describing entity relationships pertaining to a specific statistic.
 */
export interface SzRelationsPage {
    /**
     * The relationship bound value that contains two (2) entity ID values separated by a colon (e.g.: `1000:5005`).  The first entity ID value identifies the first entity in the relationship and the second entity  ID value identifies the related entity in the relationship.
     */
    bound: string;
    boundType: SzBoundType;
    /**
     * The requested page size representing the maximum number of  `SzRelation`'s' that were included in the page.
     */
    pageSize: number;
    /**
     * The requested sample size representing the number of `SzRelation`'s to be randomly selected from the page of results.
     */
    sampleSize?: number;
    /**
     * The minimum relation value of the returned results.  This is encoded the same as the `bound` value with two (2) entity ID values separated by a colon (e.g.: `1000:5005`).  The first entity ID value identifies the least value of first entity in the relationship and the second entity ID value identifies the least value of those entity ID's related to the first entity. **NOTE:** This field is absent or `null` if there are no results.
     */
    minimumValue?: string;
    /**
     * The maximum relation value of the returned results.  This is encoded the same as the `bound` value with two (2) entity ID values separated by a colon (e.g.: `1000:5005`).  The first entity ID value identifies the greatest value of first entity in the relationship and the second entity ID value identifies the greatest value of those entity ID's related to the first  entity.  **NOTE:** This field is absent or `null` if there are no results.
     */
    maximumValue?: string;
    /**
     * The minimum relation value of the entire relations page.  This will be the same as `minimumValue` if `sampleSize` was not  specified, however, if `sampleSize` was specified then this  will be the minimum relation value of all the candidate relations on the page that were used for random sample selection even if that relation was not randomly selected.  This is encoded the same as the `bound` value with two (2) entity ID values separated by a colon (e.g.: `1000:5005`).  The first entity ID value identifies the least value of first entity in the relationship and the second entity ID value identifies the least value of those entity ID's related to the first entity. **NOTE:** This field is absent or `null` if there are no results.
     */
    pageMinimumValue?: string;
    /**
     * The maximum relation value of the entire relations page.  This will be the same as `maximumValue` if `sampleSize` was not  specified, however, if `sampleSize` was specified then this  will be the maximum relation value of all the candidate relations on the page that were used for random sample selection even if that relation was not randomly selected.  This is encoded the same as the `bound` value with two (2) entity ID values separated by a colon (e.g.: `1000:5005`).  The first entity ID value identifies the greatest value of first entity in the relationship and the second entity ID value identifies the greatest value of those entity ID's related to the first entity. **NOTE:** This field is absent or `null` if there are no results.
     */
    pageMaximumValue?: string;
    /**
     * The total number of relationships representing the set of all  possible results across all pages.
     */
    totalRelationCount: number;
    /**
     * The number of relationships in the set that exist on pages before this page.
     */
    beforePageCount: number;
    /**
     * The number of relationships in the set that exist on pages after this page.
     */
    afterPageCount: number;
    /**
     * An array of `SzRelation`'s describing the relationships for the page. The `SzRelation` array will be in ascending order of the first  entity ID and then the second related entity ID.
     */
    relations: Array<SzRelation>;
}
